//Тут мы пытаемся создать такую штуку которая будет копировать файл из одгого места в другое
//импортируем gulp:
// const gulp = require('gulp') require - механизм импортирования зависимостей в note.js. В переменной gulp будет содержаться объект с методами которыми галп располагает


// const { src, dest} = require('gulp');

// //файлы копируем из одной папки в другую:

// function copy() {
//     return src('src/styles/main.scss').pipe(dest('dist'))
// }// при помощи pipe мы можем передать результат одной функции в другую. функция dest записывает файлы. Функция src читает содержимое файла

// //Чтобы мы могла отдельно вызывать этот таск нам нужно его експоритровать:

// exports.copy = copy

//----------------------------------------


//тут пытаемся делать то же самое что выше только с несколькими файлами:
// const { src, dest} = require('gulp');
// function copy() {
//     return src('src/styles/*.scss').pipe(dest('dist'))//*.scss позволяет оперировать несколькими файлами которые оканчиваются на .scss... Можно написать так req.*.scss тогда в обработку попадут файлы содержащие между точек любой контент например req.hhdrh.scss
//     //можно было написать так src/**/*.scss это значит неважно в какой папке внутри папки src работай со всеми файлами такого формата *.scss!
// }

// //можно указывать конкретные файлы которые хотим скопировать:

// const { src, dest} = require('gulp');

// const files = [
//     'src/styles/имя файла',
//     'src/styles/имя файла',
// ]

// function copy() {
//     return src(files).pipe(dest('dist'))//*.scss позволяет оперировать несколькими файлами которые оканчиваются на .scss... Можно написать так req.*.scss тогда в обработку попадут файлы содержащие между точек любой контент например req.hhdrh.scss
//     //можно было написать так src/**/*.scss это значит неважно в какой папке внутри папки src работай со всеми файлами такого формата *.scss!
// }

// //также можем исключать файлы из набора:

// const files = [
//     'src/styles/*.scss',
//     '!src/styles/two.scss',
// ]
//  и не забываем в конце писать:  exports.copy = copy


//------------------------------------------------------------

//плагин для удаления файла или папки:

//для начала подключим/установим плагин нам в проект:
//в консоли напишем npm install --save-dev gulp-rm !!!!!!!!!

// var gulp = require( 'gulp' )
// var rm = require( 'gulp-rm' )

// //есть два способа объявления taska как ниже и как выше через функцию но функцию потом надо экспортировать а таск не надо
// gulp.task( 'clean', function() { //можно так gulp.task() а можно как выше этот метод взять отдельно { src, dest, task} = require('gulp') и просто написать так task(...) без gulp
//   return gulp.src( './dist/*.scss', { read: false }) //read: false это значит что надо просто удалить не читая файлы
//     .pipe( rm() )
// })

//ниже в консоли вызываем этот таск так: npm run gulp clean

//------------------------------------------------------------

// склеим добавление и удаление

// const { src, dest, task} = require('gulp');
// const rm = require( 'gulp-rm' );

// //если ранее не устанавливали gulp и gulp-rm то надо это сделать в консоли: npm install --save-dev gulp-rm

// task( 'clean', function() {
//   return src( './dist/**/*', { read: false })
//     .pipe( rm() )
// });

// function copy() {
//     return src('./src/styles/*.scss').pipe(dest('dist'));
// };
// exports.copy = copy;

//----------------------------------------------------
//когда копируем файлы в новую папку то старые файлы в новой папке остаются нетронутыми. Для того чтобы папка назначения содержала только новые файлы без старых которые там уже
//были до копирования нам приходится сначала делать clean потом copy чтобы не делать два действия:


//для реализации последовательности тасков нам понадобится метод series

const { src, dest, task, series} = require('gulp');
const rm = require( 'gulp-rm' );



task( 'clean', function() {
  return src( './dist/**/*', { read: false })
    .pipe( rm() )
});

task ('copy', series ('clean', function () {
    return src('./src/styles/*').pipe(dest('dist'))
    })
)